{"ast":null,"code":"export const validateField = (name, value) => {\n  let error = \"\";\n  switch (name) {\n    case \"email_address\":\n      error = /\\S+@\\S+\\.\\S+/.test(value) ? \"\" : \"Invalid email format\";\n      break;\n    case \"address_postal_code\":\n      error = /^\\d{5}(-\\d{4})?$/.test(value) ? \"\" : \"Invalid ZIP/Postal Code\";\n      break;\n    case \"document_ssn\":\n      error = /^\\d{9}$/.test(value) ? \"\" : \"Must be 9 digits (no dashes)\";\n      break;\n    case \"birth_date\":\n      if (!/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/.test(value)) {\n        error = \"Invalid date or format\";\n      } else {\n        //no feb 30\n        const parsedDate = new Date(value);\n        if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()) && value === parsedDate.toISOString().split(\"T\")[0])) {\n          error = \"Cannot be Feb 30\";\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return error;\n};\nexport const isValidForm = (formData, errors) => {\n  const requiredFields = [\"name_first\", \"name_last\", \"address_line_1\", \"address_city\", \"address_state\", \"address_postal_code\", \"document_ssn\", \"email_address\", \"birth_date\"];\n  for (let field of requiredFields) {\n    if (!formData[field]) return false;\n  }\n  return Object.values(errors).every(error => !error);\n};","map":{"version":3,"names":["validateField","name","value","error","test","parsedDate","Date","isNaN","getTime","toISOString","split","isValidForm","formData","errors","requiredFields","field","Object","values","every"],"sources":["/Users/peterburger/Desktop/alloy/alloy-app/client/src/utils/validateApplication.js"],"sourcesContent":["export const validateField = (name, value) => {\n  let error = \"\";\n\n  switch (name) {\n      case \"email_address\":\n          error = /\\S+@\\S+\\.\\S+/.test(value) ? \"\" : \"Invalid email format\";\n          break;\n      case \"address_postal_code\":\n          error = /^\\d{5}(-\\d{4})?$/.test(value) ? \"\" : \"Invalid ZIP/Postal Code\";\n          break;\n      case \"document_ssn\":\n          error = /^\\d{9}$/.test(value) ? \"\" : \"Must be 9 digits (no dashes)\";\n          break;\n      case \"birth_date\":\n          if (!/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/.test(value)) {\n              error = \"Invalid date or format\";\n          } else {\n              //no feb 30\n              const parsedDate = new Date(value);\n\n              if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()) && value === parsedDate.toISOString().split(\"T\")[0])) {\n                  error = \"Cannot be Feb 30\";\n              }\n          }\n          break;\n      default:\n          break;\n  }\n\n  return error;\n};\n\nexport const isValidForm = (formData, errors) => {\n  const requiredFields = [\"name_first\", \"name_last\", \"address_line_1\", \"address_city\", \"address_state\", \"address_postal_code\", \"document_ssn\", \"email_address\", \"birth_date\"];\n\n  for (let field of requiredFields) {\n      if (!formData[field]) return false;\n  }\n\n  return Object.values(errors).every((error) => !error);\n};\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EAC5C,IAAIC,KAAK,GAAG,EAAE;EAEd,QAAQF,IAAI;IACR,KAAK,eAAe;MAChBE,KAAK,GAAG,cAAc,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,EAAE,GAAG,sBAAsB;MAChE;IACJ,KAAK,qBAAqB;MACtBC,KAAK,GAAG,kBAAkB,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,EAAE,GAAG,yBAAyB;MACvE;IACJ,KAAK,cAAc;MACfC,KAAK,GAAG,SAAS,CAACC,IAAI,CAACF,KAAK,CAAC,GAAG,EAAE,GAAG,8BAA8B;MACnE;IACJ,KAAK,YAAY;MACb,IAAI,CAAC,+CAA+C,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;QAC9DC,KAAK,GAAG,wBAAwB;MACpC,CAAC,MAAM;QACH;QACA,MAAME,UAAU,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAAC;QAElC,IAAI,EAAEG,UAAU,YAAYC,IAAI,IAAI,CAACC,KAAK,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIN,KAAK,KAAKG,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UACnHP,KAAK,GAAG,kBAAkB;QAC9B;MACJ;MACA;IACJ;MACI;EACR;EAEA,OAAOA,KAAK;AACd,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAGA,CAACC,QAAQ,EAAEC,MAAM,KAAK;EAC/C,MAAMC,cAAc,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,gBAAgB,EAAE,cAAc,EAAE,eAAe,EAAE,qBAAqB,EAAE,cAAc,EAAE,eAAe,EAAE,YAAY,CAAC;EAE3K,KAAK,IAAIC,KAAK,IAAID,cAAc,EAAE;IAC9B,IAAI,CAACF,QAAQ,CAACG,KAAK,CAAC,EAAE,OAAO,KAAK;EACtC;EAEA,OAAOC,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAACK,KAAK,CAAEf,KAAK,IAAK,CAACA,KAAK,CAAC;AACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}