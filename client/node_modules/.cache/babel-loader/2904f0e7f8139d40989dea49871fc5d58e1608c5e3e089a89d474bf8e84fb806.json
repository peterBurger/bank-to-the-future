{"ast":null,"code":"export const validateField=(name,value)=>{let error='';switch(name){case'address_state':error=/^[A-Z]{2}$/.test(value)?'':'State must be a valid two-letter code (e.g. NY)';break;case'address_postal_code':error=/^\\d{5}(-\\d{4})?$/.test(value)?'':'Invalid ZIP/Postal Code';break;case'address_country':error=value==='US'?'':'Country must be \\'US\\'';break;case'document_ssn':error=/^\\d{9}$/.test(value)?'':'SSN must be 9 digits (no dashes)';break;case'email_address':error=/\\S+@\\S+\\.\\S+/.test(value)?'':'Invalid email format';break;case'birth_date':if(!/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/.test(value)){error='Invalid date';}else{// is not a fake date (e.g. feb 30)\nconst parsedDate=new Date(value);if(!(parsedDate instanceof Date&&!isNaN(parsedDate.getTime())&&value===parsedDate.toISOString().split('T')[0])){error='Invalid date';}}break;default:break;}return error;};export const isValidForm=(formData,errors)=>{const requiredFields=['name_first','name_last','address_line_1','address_city','address_state','address_postal_code','address_country','document_ssn','email_address','birth_date'];for(let field of requiredFields){if(!formData[field])return false;}return Object.values(errors).every(error=>!error);};","map":{"version":3,"names":["validateField","name","value","error","test","parsedDate","Date","isNaN","getTime","toISOString","split","isValidForm","formData","errors","requiredFields","field","Object","values","every"],"sources":["/Users/peterburger/Desktop/alloy/alloy-app/client/src/utils/validateApplicationForm.js"],"sourcesContent":["export const validateField = (name, value) => {\n  let error = '';\n\n  switch (name) {\n    case 'address_state':\n      error = /^[A-Z]{2}$/.test(value) ? '' : 'State must be a valid two-letter code (e.g. NY)';\n      break;\n    case 'address_postal_code':\n      error = /^\\d{5}(-\\d{4})?$/.test(value) ? '' : 'Invalid ZIP/Postal Code';\n      break;\n    case 'address_country':\n      error = value === 'US' ? '' : 'Country must be \\'US\\'';\n      break;\n    case 'document_ssn':\n      error = /^\\d{9}$/.test(value) ? '' : 'SSN must be 9 digits (no dashes)';\n      break;\n    case 'email_address':\n      error = /\\S+@\\S+\\.\\S+/.test(value) ? '' : 'Invalid email format';\n      break;\n    case 'birth_date':\n      if (!/^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/.test(value)) {\n        error = 'Invalid date';\n      } else {\n        // is not a fake date (e.g. feb 30)\n        const parsedDate = new Date(value);\n\n        if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()) && value === parsedDate.toISOString().split('T')[0])) {\n          error = 'Invalid date';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n\n  return error;\n};\n\nexport const isValidForm = (formData, errors) => {\n  const requiredFields = ['name_first', 'name_last', 'address_line_1', 'address_city', 'address_state', 'address_postal_code', 'address_country', 'document_ssn', 'email_address', 'birth_date'];\n\n  for (let field of requiredFields) {\n    if (!formData[field]) return false;\n  }\n\n  return Object.values(errors).every((error) => !error);\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,aAAa,CAAGA,CAACC,IAAI,CAAEC,KAAK,GAAK,CAC5C,GAAI,CAAAC,KAAK,CAAG,EAAE,CAEd,OAAQF,IAAI,EACV,IAAK,eAAe,CAClBE,KAAK,CAAG,YAAY,CAACC,IAAI,CAACF,KAAK,CAAC,CAAG,EAAE,CAAG,iDAAiD,CACzF,MACF,IAAK,qBAAqB,CACxBC,KAAK,CAAG,kBAAkB,CAACC,IAAI,CAACF,KAAK,CAAC,CAAG,EAAE,CAAG,yBAAyB,CACvE,MACF,IAAK,iBAAiB,CACpBC,KAAK,CAAGD,KAAK,GAAK,IAAI,CAAG,EAAE,CAAG,wBAAwB,CACtD,MACF,IAAK,cAAc,CACjBC,KAAK,CAAG,SAAS,CAACC,IAAI,CAACF,KAAK,CAAC,CAAG,EAAE,CAAG,kCAAkC,CACvE,MACF,IAAK,eAAe,CAClBC,KAAK,CAAG,cAAc,CAACC,IAAI,CAACF,KAAK,CAAC,CAAG,EAAE,CAAG,sBAAsB,CAChE,MACF,IAAK,YAAY,CACf,GAAI,CAAC,+CAA+C,CAACE,IAAI,CAACF,KAAK,CAAC,CAAE,CAChEC,KAAK,CAAG,cAAc,CACxB,CAAC,IAAM,CACL;AACA,KAAM,CAAAE,UAAU,CAAG,GAAI,CAAAC,IAAI,CAACJ,KAAK,CAAC,CAElC,GAAI,EAAEG,UAAU,WAAY,CAAAC,IAAI,EAAI,CAACC,KAAK,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,EAAIN,KAAK,GAAKG,UAAU,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CACrHP,KAAK,CAAG,cAAc,CACxB,CACF,CACA,MACF,QACE,MACJ,CAEA,MAAO,CAAAA,KAAK,CACd,CAAC,CAED,MAAO,MAAM,CAAAQ,WAAW,CAAGA,CAACC,QAAQ,CAAEC,MAAM,GAAK,CAC/C,KAAM,CAAAC,cAAc,CAAG,CAAC,YAAY,CAAE,WAAW,CAAE,gBAAgB,CAAE,cAAc,CAAE,eAAe,CAAE,qBAAqB,CAAE,iBAAiB,CAAE,cAAc,CAAE,eAAe,CAAE,YAAY,CAAC,CAE9L,IAAK,GAAI,CAAAC,KAAK,GAAI,CAAAD,cAAc,CAAE,CAChC,GAAI,CAACF,QAAQ,CAACG,KAAK,CAAC,CAAE,MAAO,MAAK,CACpC,CAEA,MAAO,CAAAC,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAACK,KAAK,CAAEf,KAAK,EAAK,CAACA,KAAK,CAAC,CACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}